<?php
// $Id: montharchive.module,v 1.4.2.6 2010/03/10 02:52:21 prometheus6 Exp $


/**
 * @file
 *	Module provides a non-Views based monthly archive
 */

define('ARCHIVEROOTBEFORETYPE', 1);
define('TYPEBEFOREARCHIVEROOT', 2);

function montharchive_access_page($archive_type) {
  if (is_string($archive_type)) {
    $archive_types = variable_get('montharchive_block_node_type', array());
    return user_access('access content') and ($archive_types[$archive_type]);
  }
  elseif (is_null($archive_type)) {return TRUE;}
}

/**
 * hook_block() implementation.
 *
 */
function montharchive_block($op = 'list', $delta = 0, $edit = array()) {
  $requested_types = variable_get('montharchive_block_node_type', array());
  switch ($op) {
    case 'list' :
      $block['montharchive_all']['info'] = t('Monthly archives');
      foreach ($requested_types as $type) {
        // each array record has a node type name as it's key and value if the node type has a block,
        // or a value of 0 if it doesn't.
        if ($type) {
          $nodetypes = node_get_types('names');
          // I have no idea why the inserted string is wrapped in <em> tags...delete the word 'strip_tags' calls if you don't believe me.
          $block['montharchive_' . $type]['info'] = strip_tags(t('Monthly %type archives', array(
            '%type' => $nodetypes[$type]
          )));
        }
      }
      return $block;
    case 'view' :
      // our block content
      $montharchive_max_block_links = variable_get('montharchive_block_link_max', 12);
      if ($delta == 'montharchive_all') {
        $montharchive_include_node_type = variable_get('montharchive_include_node_type', array_keys(node_get_types('names')));
        $block['subject'] = t('Monthly archives');
      }
      else {
        $requested_type = substr($delta, strlen('montharchive_'));
        if ($requested_types[$requested_type]) {
          $block['subject'] = t('Monthly %type archives', array(
            '%type' => node_get_types('name', $requested_type)
          ));
          $montharchive_include_node_type = array(
            $requested_type
          );
        }
      }
      if (count($montharchive_include_node_type)) {
        $montharchive_rev_chronsort = variable_get('montharchive_rev_chronsort', 0);
        
        $query = montharchive_links_query($montharchive_include_node_type, $montharchive_rev_chronsort);
        // plus one is the easiest way to find out if you need a "more" link
        $monthlist = db_query_range(db_rewrite_sql($query, 'n', 'nid'), 0, $montharchive_max_block_links + 1);
        
        $block_content = array();
        $listed_links = 0;
        while (($listed_links < $montharchive_max_block_links) && $month = db_fetch_array($monthlist)) {
          $listed_links += 1;
          $month['type'] = $requested_type;
          $month['type_name'] = node_get_types('name', $requested_type);
          $block_content[] = theme('montharchive_link', $month);
        }
        if (db_fetch_object($monthlist)) {
          $montharchive_path = variable_get('montharchive_path', 'archive');
          $path_order = variable_get('montharchive_path_order', ARCHIVEROOTBEFORETYPE);
          $node_path = variable_get('montharchive_' . $month['type'] . '_path', $month['type']);
          $path = $requested_type ? ($path_order == TYPEBEFOREARCHIVEROOT ? $node_path . '/' . $montharchive_path : $montharchive_path . '/' . $node_path) : $montharchive_path;
          $morelink = l(t('more...'), $path);
        }
        if (count($block_content)) {
          $block['content'] = theme('item_list', $block_content) . $morelink;
          return $block;
        }
      }
    break;
  }
}

/**
 * hook_help() implementation
 *
 * TODO: better help
 *
 */
function montharchive_help($path, $arg) {
  switch ($path) {
    case 'admin/help#montharchive' :
      return t('');
    break;
    case 'admin/modules#montharchive' :
      return t('Creates archives site wide and by node type.');
    break;
    default :
      return '';
  }
}

/**
 * Generate a page listing links to all the archives that can be generated
 *
 * @return string
 */
function montharchive_link_page($include_node_types = NULL) {
  if (is_string($include_node_types)) {
    $montharchive_include_node_type = array(
      $include_node_types
    );
  }
  else {
    $montharchive_include_node_type = variable_get('montharchive_include_node_type', array_keys(node_get_types('names')));
  }
  $query = montharchive_links_query($montharchive_include_node_type);
  $monthlist = db_query(db_rewrite_sql($query, 'n', 'nid'));
  $block_content = array();
  $listed_links = 0;
  while ($month = db_fetch_array($monthlist)) {
    $listed_links += 1;
    $block_content[] = theme('montharchive_link', $month);
  }
  // TODO: needs a montharchive_link_page_title variale series  
  if (is_string($include_node_types)) {
    $link_data['type'] = $include_node_types;
    $link_data['type_name'] = node_get_types('name', $include_node_types);
    $page_title = 'Monthly [type_name] archive links';
  }
  else {
    $page_title = 'Monthly archive links';
  }
  
  drupal_set_title(token_replace($page_title, 'montharchive', (object) $link_data));
  
  return theme('item_list', $block_content);
}

/**
 * Create SQL for links query
 *
 * @param array $node_types
 * @return string
 */
function montharchive_links_query($node_types) {
  foreach ($node_types as $key => $value) {
    $node_types[$key] = "'" . db_escape_string($value) . "'";
  }
  $montharchive_rev_linksort = variable_get('montharchive_rev_linksort', 1);
  $query = '
  	SELECT CONCAT(DATE_FORMAT(FROM_UNIXTIME(created),\'%Y\'),DATE_FORMAT(FROM_UNIXTIME(created),\'%m\')) AS yearmonth,
    COUNT(CONCAT(DATE_FORMAT(FROM_UNIXTIME(created),\'%Y\'),DATE_FORMAT(FROM_UNIXTIME(created),\'%m\'))) AS postcount,
    DATE_FORMAT(FROM_UNIXTIME(created),\'%Y\') AS year,
    DATE_FORMAT(FROM_UNIXTIME(created),\'%m\') AS monthno,
    DATE_FORMAT(FROM_UNIXTIME(created),\'%%b\') AS mon,
    DATE_FORMAT(FROM_UNIXTIME(created),\'%M\') AS month
    FROM {node} n ';
  $query .= 'WHERE n.type IN (' . implode(',', $node_types) . ') ';
  $query .= ' AND status = 1 ';
  $query .= ' GROUP BY yearmonth ORDER BY yearmonth';
  $query .= $montharchive_rev_linksort ? ' ASC' : ' DESC ';
  return $query;
}

/**
 * hook_menu() implementation
 *
 */
function montharchive_menu() {
  $archive_types = array_flip(variable_get('montharchive_block_node_type', array()));
  $archive_types['all'] = NULL;
  unset($archive_types[0]);
  $archive_root = variable_get('montharchive_path', 'archive');
  $path_order = variable_get('montharchive_path_order', ARCHIVEROOTBEFORETYPE);
  foreach ($archive_types as $archive_type) {
    $node_path = variable_get('montharchive_' . $archive_type . '_path', $archive_type);
    $archive_index = $archive_type ? ($path_order == TYPEBEFOREARCHIVEROOT ? $node_path . '/' . $archive_root : $archive_root . '/' . $node_path) : $archive_root;
    $items[$archive_index] = array(
      'title' => $archive_type ? t('Monthly %type archives links', array(
        '%type' => $archive_type
      )) : t('Monthly archives links'), 
      'page callback' => 'montharchive_link_page', 
      'page arguments' => $archive_type ? array(
        $archive_type
      ) : array(), 
      'type' => MENU_CALLBACK, 
      'access callback' => 'montharchive_access_page', 
      'access arguments' => array(
        $archive_type
      )
    );
    $items[$archive_index . '/%/%'] = array(
      'title' => $archive_type ? variable_get('montharchive_' . $archive_type . '_title', $archive_type) : variable_get('montharchive_title', 'Monthly archive [month] [yyyy]'), 
      'page callback' => 'montharchive_post_page', 
      'page arguments' => $archive_type ? array(
        2, 
        3, 
        $archive_type
      ) : array(
        1, 
        2
      ), 
      'type' => MENU_CALLBACK, 
      'access callback' => 'montharchive_access_page', 
      'access arguments' => array(
        $archive_type
      )
    );
  }
  
  $items['admin/settings/montharchive'] = array(
    'title' => t('Monthly archive settings'), 
    'page callback' => 'drupal_get_form', 
    'page arguments' => array(
      'montharchive_settings_form'
    ), 
    'type' => MENU_NORMAL_ITEM, 
    'access arguments' => array(
      'access administration pages'
    )
  );
  $items['admin/settings/montharchive/'] = array(
    'title' => t('Monthly archive settings'), 
    'description' => 'Configure node types for which blocks will be generated.', 
    'page callback' => 'drupal_get_form', 
    'page arguments' => array(
      'montharchive_settings_form'
    ), 
    'type' => MENU_DEFAULT_LOCAL_TASK, 
    'access arguments' => array(
      'access administration pages'
    ), 
    'weight' => 5
  );
  $items['admin/settings/montharchive/type_path'] = array(
    
    'title' => t('Links and titles'), 
    'description' => 'Configure path names for node types for which blocks will be generated and date format of the link text.', 
    'page callback' => 'drupal_get_form', 
    'page arguments' => array(
      'montharchive_settings_type_path_form'
    ), 
    'type' => MENU_LOCAL_TASK, 
    'access arguments' => array(
      'access administration pages'
    ), 
    'weight' => 10
  );
  return $items;
}

/**
 * Builds the archive displays
 *
 * @param string $year (2 or 4 digits)
 * @param string $month (zero-filled 2 digits)
 * @param string $include_node_types
 * @return string
 */
function montharchive_post_page($year, $monthno, $include_node_types = NULL) {
  if (is_numeric($year) and is_numeric($monthno)) {
    $default_nodes_main = variable_get('default_nodes_main', 20);
    $montharchive_paginate = variable_get('montharchive_paginate', 1);
    $montharchive_include_node_types = is_string($include_node_types) ? array(
      $include_node_types
    ) : array_keys(variable_get('montharchive_include_node_type', node_get_types('names')));
    
    $node_query_str = montharchive_post_query($montharchive_include_node_types, $year, $monthno);
    $node_query_str = db_rewrite_sql($node_query_str, 'n', 'node');
    $node_query = $montharchive_paginate ? pager_query($node_query_str, $default_nodes_main, 0) : db_query($node_query_str);
    while ($nid = db_fetch_array($node_query)) {
      $node = node_load($nid['nid']);
      $page .= node_view($node, 1);
    }
    if ($montharchive_paginate) {
      $page .= theme('pager', NULL, $default_nodes_main, 0);
    }
    
    // maybe replace these to remove dependency on date_api module?
    // maybe make it conditional?
    $month_names = date_month_names(1);
    $month_names_abbr = date_month_names_abbr(1);
    
    $link_data->monthno = $monthno;
    $link_data->year = $year;
    $link_data->month = $month_names[(integer) $monthno];
    $link_data->mon = $month_names_abbr[(integer) $monthno];
    if (is_string($include_node_types)) {
      $link_data->type = $include_node_types;
      $link_data->type_name = node_get_types('name', $include_node_types);
      $page_title = variable_get('montharchive_' . $include_node_types . '_title', '[type_name] [month] [yyyy]');
    }
    else {
      $page_title = variable_get('montharchive_title', '[month] [yyyy]');
    }
    
    drupal_set_title(token_replace($page_title, 'montharchive', $link_data));
  }
  return $page ? $page : '';
}

/**
 * Creates SQL for the archive queries
 *
 * @param array $node_types
 * @param string $year (2 or 4 digits)
 * @param string $month (zero-filled 2 digits)
 * @return string
 */
function montharchive_post_query($node_types, $year, $month) {
  foreach ($node_types as $key => $value) {
    $node_types[$key] = "'" . db_escape_string($value) . "'";
  }
  $montharchive_rev_pagesort = variable_get('montharchive_rev_pagesort', 1);
  $nextmonth = sprintf('%02d', $month + 1);
  $query = "SELECT n.nid FROM {node} n
    WHERE FROM_UNIXTIME(n.created) >= '{$year}-{$month}'
    AND FROM_UNIXTIME(n.created) < '{$year}-{$nextmonth}'";
  $query .= ' AND n.type IN (' . implode(',', $node_types) . ') ';
  $query .= ' AND status = 1 ';
  $query .= ' ORDER BY n.created';
  $query .= $montharchive_rev_pagesort ? '' : ' DESC ';
  return $query;
}

/**
 * Defines administration form
 *
 * @return array
 */
function montharchive_settings_form() {
  $output['montharchive_all'] = array(
    
    '#tree' => FALSE, 
    '#type' => 'fieldset', 
    '#collapsible' => TRUE, 
    '#collapsed' => TRUE, 
    '#title' => t('Global block node types'), 
    'montharchive_include_node_type' => array(
      
      '#type' => 'checkboxes', 
      '#multiple' => TRUE, 
      '#default_value' => variable_get('montharchive_include_node_type', array_keys(node_get_types('names'))), 
      '#options' => node_get_types('names'), 
      '#description' => t('Selected node types will be included in the global block and archive pages.')
    )
  );
  $output['montharchive_block'] = array(
    
    '#tree' => FALSE, 
    '#type' => 'fieldset', 
    '#collapsible' => TRUE, 
    '#collapsed' => TRUE, 
    '#title' => t('Blocks by node type'), 
    'montharchive_block_node_type' => array(
      '#type' => 'checkboxes', 
      '#multiple' => TRUE, 
      '#default_value' => variable_get('montharchive_block_node_type', array()), 
      '#options' => node_get_types('names'), 
      '#description' => t('Blocks and archive pages for the selected node types will be created.')
    )
  );
  
  $output['montharchive_block_link_max'] = array(
    
    '#type' => 'textfield', 
    '#title' => t('Maximum month links in block'), 
    '#default_value' => variable_get('montharchive_block_link_max', 12), 
    '#size' => 5, 
    '#maxlength' => 5, 
    '#description' => t('Enter a number to limit the number of months linked in the block, blank or "0" to list all months.')
  );
  
  $output['montharchive_rev_linksort'] = array(
    
    '#type' => 'checkbox', 
    '#title' => t('Sort links in chronological order'), 
    '#return_value' => 1, 
    '#default_value' => variable_get('montharchive_rev_linksort', 0), 
    '#description' => t('If checked, the list of archive links will be sorted from oldest to newest. Otherwise it will be sorted from newest to oldest')
  );
  
  $output['montharchive_show_linkcount'] = array(
    '#type' => 'checkbox', 
    '#title' => t('Show link count'), 
    '#return_value' => 1, 
    '#default_value' => variable_get('montharchive_show_linkcount', 1), 
    '#description' => t('If checked, the link to each monthly archive page in blocks will show the number of nodes in that month ')
  );
  
  $output['montharchive_rev_pagesort'] = array(
    
    '#type' => 'checkbox', 
    '#title' => t('Sort archive page in chronological order'), 
    '#return_value' => 1, 
    '#default_value' => variable_get('montharchive_rev_pagesort', 0), 
    '#description' => t('If checked, the list of archive links will be sorted from oldest to newest. Otherwise it will be sorted from newest to oldest')
  );
  
  $output['montharchive_paginate'] = array(
    
    '#type' => 'checkbox', 
    '#title' => t('Paginate archive page'), 
    '#return_value' => 1, 
    '#default_value' => variable_get('montharchive_paginate', 0), 
    '#description' => t('If checked the output will be split into pages. The number of posts will respect the global nodes per page setting.')
  );
  $form = system_settings_form($output);
  $form['#submit'] = array(
    'montharchive_settings_form_submit'
  );
  $output['#validate'][] = 'montharchive_settings_form_validate';
  return $form;
}

/**
 * montharchive_settings_form reset function
 *
 */
function montharchive_settings_form_reset() {
  variable_del('montharchive_include_node_type');
  variable_del('montharchive_block_node_type');
  
  variable_del('montharchive_block_link_max');
  variable_del('montharchive_rev_linksort');
  variable_del('montharchive_show_linkcount');
  variable_del('montharchive_rev_pagesort');
  variable_del('montharchive_paginate');
  montharchive_settings_type_path_form_reset();
}

/**
 * montharchive_settings_form submit function
 *
 * @param array $form
 * @param array $form_state
 */
function montharchive_settings_form_submit($form, &$form_state) {
  $edit = $form_state['values'];
  if ($form_state['clicked_button']['#value'] == 'Reset to defaults') {
    montharchive_settings_form_reset();
  }
  else {
    variable_set('montharchive_include_node_type', $edit['montharchive_include_node_type']);
    variable_set('montharchive_block_node_type', $edit['montharchive_block_node_type']);
    
    variable_set('montharchive_block_link_max', $edit['montharchive_block_link_max']);
    variable_set('montharchive_rev_linksort', $edit['montharchive_rev_linksort']);
    variable_set('montharchive_show_linkcount', $edit['montharchive_show_linkcount']);
    variable_set('montharchive_rev_pagesort', $edit['montharchive_rev_pagesort']);
    variable_set('montharchive_paginate', $edit['montharchive_paginate']);
  }
  menu_rebuild();
}

/**
 * montharchive_settings_form validation function
 *
 * @param array $form
 * @param array $form_state
 */
function montharchive_settings_form_validate($form, &$form_state) {
  if (!is_numeric($form_state['values']['montharchive_block_link_max'])) {
    form_set_error('montharchive_block_link_max', 'Maximum number of links must be numeric.');
  }
}

function montharchive_settings_type_path_form() {
  $tokens = montharchive_token_list('montharchive');
  foreach ($tokens['montharchive'] as $key => $value) {
    $token_help[] = "<strong>$key</strong>: $value";
  }
  $archive_path = variable_get('montharchive_path', 'archive');
  $output['global'] = array(
    
    '#tree' => FALSE, 
    '#type' => 'fieldset', 
    '#collapsible' => TRUE, 
    '#collapsed' => TRUE, 
    '#title' => t('Global settings'), 
    'montharchive_link_text' => array(
      '#type' => 'textfield', 
      '#title' => t('Link text'), 
      '#default_value' => variable_get('montharchive_link_text', '[month] [yyyy]'), 
      '#description' => t('Define how the block link text is constructed.')
    ), 
    'montharchive_path' => array(
      
      '#type' => 'textfield', 
      '#title' => t('Archive path'), 
      '#default_value' => variable_get('montharchive_path', 'archive'), 
      '#description' => t('Enter the path to use as the default archive path. Please use only letters, numbers and underscores (_).<br />The global archive path
      will be "archive_path/year/month".')
    ), 
    'montharchive_title' => array(
      '#type' => 'textfield', 
      '#title' => t('Archive title'), 
      '#default_value' => variable_get('montharchive_title', 'Monthly archive [month] [yyyy]'), 
      '#description' => t('Enter the base title to use for the archive pages.')
    ), 
    'help' => array(
      
      '#tree' => FALSE, 
      '#type' => 'fieldset', 
      '#collapsible' => TRUE, 
      '#collapsed' => TRUE, 
      '#title' => t('Replacement patterns'), 
      'output' => array(
        '#type' => 'markup', 
        '#value' => theme('item_list', $token_help), 
        '#prefix' => '<div>', 
        '#suffix' => '</div>'
      )
    )
  );
  $output['by_node_type'] = array(
    '#tree' => FALSE, 
    '#type' => 'fieldset', 
    '#collapsible' => TRUE, 
    '#collapsed' => TRUE, 
    '#title' => t('Node type settings')
  );
  
  $output['by_node_type']['montharchive_path_order'] = array(
    
    '#type' => 'radios', 
    '#title' => t('Node type archive path'), 
    '#options' => array(
      ARCHIVEROOTBEFORETYPE => $archive_path . '/node_type', 
      TYPEBEFOREARCHIVEROOT => 'node_type/' . $archive_path
    ), 
    '#default_value' => variable_get('montharchive_path_order', ARCHIVEROOTBEFORETYPE), 
    '#description' => 'Select the order in which the parts of node specific archive appear in the path to the archive page. <br />The node type archive paths will be
    archive_path/node_type/year/month or node_type/archive_path/year/month.'
  );
  $output['by_node_type']['node_type'] = array(
    '#tree' => TRUE, 
    '#type' => 'fieldset', 
    '#title' => t('Titles and paths')
  );
  
  $node_types = variable_get('montharchive_block_node_type', array());
  foreach ($node_types as $key => $node_type) {
    if ($node_type) {
      $output['by_node_type']['node_type'][$node_type] = array(
        
        'title' => array(
          '#type' => 'textfield', 
          '#title' => node_get_types('name', $node_type) . t(' archive title'), 
          '#default_value' => variable_get('montharchive_' . $node_type . '_title', '[type_name] [month] [yyyy]')
        ), 
        'path' => array(
          '#type' => 'textfield', 
          '#title' => node_get_types('name', $node_type) . t(' archive path'), 
          '#default_value' => variable_get('montharchive_' . $node_type . '_path', $node_type)
        )
      );
    }
  }
  $output['by_node_type']['node_type']['help'] = array(
    
    '#tree' => FALSE, 
    '#type' => 'fieldset', 
    '#collapsible' => TRUE, 
    '#collapsed' => TRUE, 
    '#title' => t('Replacement patterns'), 
    'output' => array(
      '#type' => 'markup', 
      '#value' => theme('item_list', $token_help), 
      '#prefix' => '<div>', 
      '#suffix' => '</div>'
    )
  );
  
  $output = system_settings_form($output);
  $output['#submit'] = array(
    'montharchive_settings_type_path_submit'
  );
  $output['#validate'][] = 'montharchive_settings_type_path_validate';
  return $output;
}

function montharchive_settings_type_path_form_reset() {
  variable_del('montharchive_link_text');
  variable_del('montharchive_path');
  variable_del('montharchive_title');
  variable_del('montharchive_path_order');
  $node_types = node_get_types('names');
  foreach ($node_types as $key => $node_type) {
    if ($node_type) {
      variable_del('montharchive_' . $key . '_path');
      variable_del('montharchive_' . $key . '_title');
    }
  }
}

function montharchive_settings_type_path_submit($form, &$form_state) {
  if ($form_state['clicked_button']['#value'] == 'Reset to defaults') {
    montharchive_settings_type_path_form_reset();
  }
  else {
    $edit = $form_state['values'];
    variable_set('montharchive_link_text', $edit['montharchive_link_text']);
    variable_set('montharchive_path', $edit['montharchive_path']);
    variable_set('montharchive_title', $edit['montharchive_title']);
    variable_set('montharchive_path_order', $edit['montharchive_path_order']);
    
    $edit = $form_state['values']['node_type'];
    foreach ($edit as $key => $value) {
      variable_set('montharchive_' . $key . '_path', $value['path']);
      variable_set('montharchive_' . $key . '_title', $value['title']);
    }
  }
  menu_rebuild();
}

function montharchive_settings_type_path_validate($form, &$form_state) {
  $found = preg_match('%^[a-z|0-9|_]+$%', $form_state['values']['montharchive_path']);
  if (!$found) {
    form_set_error('global', 'Archive path must be all lowercase, and begin with an alphabetic character or underscore. The remainder must be all alphanumerics.', TRUE);
  }
  
  $edit = $form_state['values']['node_type'];
  foreach ($edit as $value) {
    $found = preg_match('%^[a-z|0-9|_]+$%', $value['path']);
    if (!$found) {
      form_set_error('path_name', 'Archive path must be all lowercase, and begin with an alphabetic character or underscore. The remainder must be all alphanumerics.', TRUE);
    }
  }
}

/**
 * hook_theme() implementation
 *
 * @return array
 */
function montharchive_theme($existing, $type, $theme, $path) {
  return array(
    'montharchive_link' => array(
      'arguments' => array(
        'link_data' => NULL
      )
    )
  );
}

/**
 * hook_token_list() implementation
 *
 * @param string $type
 * @return array
 */
function montharchive_token_list($type = 'all') {
  if ($type == 'montharchive') {
    $tokens['montharchive']['month'] = t('Long month name (January, February...December)');
    $tokens['montharchive']['mon'] = t('Short month name (Jan, Feb...Dec)');
    $tokens['montharchive']['mm'] = t('Two digit month (01, 02...12)');
    $tokens['montharchive']['m'] = t('Variable digit month (1, 2...12');
    $tokens['montharchive']['yyyy'] = t('Four digit year');
    $tokens['montharchive']['yy'] = t('Two digit year');
    $tokens['montharchive']['type'] = t('Machine readable type name');
    $tokens['montharchive']['type_name'] = t('Displayable type label');
    return $tokens;
  }
  else {
    return array();
  }
}

/**
 * hook_token_values() implementation
 *
 * @param string $type
 * @param object $object
 * @return unknown
 */
function montharchive_token_values($type, $object = NULL) {
  if ($type == 'montharchive') {
    $link_data = $object;
    $token['type'] = $link_data->type;
    $token['type_name'] = $link_data->type_name;
    $token['month'] = $link_data->month;
    $token['mon'] = $link_data->mon;
    $token['mm'] = $link_data->monthno;
    $token['m'] = (integer) $link_data->monthno;
    $token['yyyy'] = $link_data->year;
    $token['yy'] = substr($link_data->year, -2);
    return $token;
  }
  else {
    return array();
  }
}

/**
 * Format post count for block
 *
 * @param array $link_data
 * @return string
 */
function _montharchive_linkcount($link_data) {
  return variable_get('montharchive_show_linkcount', 1) ? " ({$link_data['postcount']})" : '';
}

/**
 * Format link text for block
 *
 * @param array $link_data
 * @return string
 */
function _montharchive_linktext($link_data) {
  return token_replace(variable_get('montharchive_link_text', '[month] [yyyy]'), 'montharchive', (object) $link_data);
}

/**
 * Format url to archive for block
 *
 * @param array $link_data
 * @return string
 */
function _montharchive_linkpath($link_data, $montharchive_path) {
  $path_order = variable_get('montharchive_path_order', ARCHIVEROOTBEFORETYPE);
  $node_path = variable_get('montharchive_' . $link_data['type'] . '_path', $link_data['type']);
  $path = $link_data['type'] ? ($path_order == TYPEBEFOREARCHIVEROOT ? $node_path . '/' . $montharchive_path : $montharchive_path . '/' . $node_path) : $montharchive_path;
  return $path . "/{$link_data['year']}/{$link_data['monthno']}";
}

/**
 * Theme function for links to archives
 *
 * @param array $link_data
 * The indexes are:
 * 		year - four digit year
 * 		monthno - 01..12
 * 		mon - short month name
 * 		month - long month name
 * 		postcount - number of post
 *
 * @return string
 */
function theme_montharchive_link($link_data) {
  $montharchive_path = variable_get('montharchive_path', 'archive');
  $link_count = _montharchive_linkcount($link_data);
  $link_path = _montharchive_linkpath($link_data, $montharchive_path);
  return l(_montharchive_linktext($link_data) . $link_count, $link_path);
}
